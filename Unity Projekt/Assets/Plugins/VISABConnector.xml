<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VISABConnector</name>
    </assembly>
    <members>
        <member name="T:VISABConnector.ApiResponse">
            <summary>
            Is returned when requests to the VISAB WebApi are made
            </summary>
        </member>
        <member name="P:VISABConnector.ApiResponse.IsSuccess">
            <summary>
            Whether the request was successfull
            </summary>
        </member>
        <member name="P:VISABConnector.ApiResponse.Message">
            <summary>
            The message returned by VISAB WebApi
            </summary>
        </member>
        <member name="T:VISABConnector.AsyncHelper">
            <summary>
            Helper class for running asynchronous methods synchronously without deadlocking the current
            thread. Should be used when VISABApi has to be used in non async methods.
            </summary>
        </member>
        <member name="M:VISABConnector.AsyncHelper.RunSynchronously``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Invokes the given Func on a different thread and waits on execution finish
            </summary>
            <typeparam name="TReturn">The return type of the Func</typeparam>
            <param name="asyncMethod">The Func (function reference) to invoke</param>
            <returns>The result of the Func invocation</returns>
        </member>
        <member name="M:VISABConnector.AsyncHelper.RunSynchronously``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            Invokes the given Func on a different thread and waits on execution finish
            </summary>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="TReturn">The return type of the Func</typeparam>
            <param name="asyncMethod">The Func (function reference) to invoke</param>
            <param name="value">The first parameter</param>
            <returns>The result of the Func invocation</returns>
        </member>
        <member name="M:VISABConnector.AsyncHelper.RunSynchronously``3(System.Func{``0,``1,System.Threading.Tasks.Task{``2}},``0,``1)">
            <summary>
            Invokes the given Func on a different thread and waits on execution finish
            </summary>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="TReturn">The return type of the Func</typeparam>
            <param name="asyncMethod">The Func (function reference) to invoke</param>
            <param name="value1">The first parameter</param>
            <param name="value2">The second parameter</param>
            <returns>The result of the Func invocation</returns>
        </member>
        <member name="M:VISABConnector.AsyncHelper.RunSynchronously``4(System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}},``0,``1,``2)">
            <summary>
            Invokes the given Func on a different thread and waits on execution finish
            </summary>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="T3">The type of the third parameter</typeparam>
            <typeparam name="TReturn">The return type of the Func</typeparam>
            <param name="asyncMethod">The Func (function reference) to invoke</param>
            <param name="value1">The first parameter</param>
            <param name="value2">The second parameter</param>
            <param name="value3">The third parameter</param>
            <returns>The result of the Func invocation</returns>
        </member>
        <member name="T:VISABConnector.IUnityMapInformation">
            <summary>
            The interface that all classes containing map information have to implement
            </summary>
        </member>
        <member name="T:VISABConnector.IUnityMap">
            <summary>
            The interface all classes containing map images have to implement
            </summary>
        </member>
        <member name="T:VISABConnector.IVISABSession">
            <summary>
            Class that embodies a transmission session at the VISAB WebApi
            </summary>
        </member>
        <member name="E:VISABConnector.IVISABSession.CloseSessionEvent">
            <summary>
            Event that is invoked before closing the session
            </summary>
        </member>
        <member name="P:VISABConnector.IVISABSession.Game">
            <summary>
            The name of the game of which data will be sent
            </summary>
        </member>
        <member name="P:VISABConnector.IVISABSession.IsActive">
            <summary>
            Whether the session is active at the VISAB WebApi
            </summary>
        </member>
        <member name="P:VISABConnector.IVISABSession.RequestHandler">
            <summary>
            The RequestHandler used for making the Http requests
            </summary>
        </member>
        <member name="P:VISABConnector.IVISABSession.SessionId">
            <summary>
            The unique identifier for the current session
            </summary>
        </member>
        <member name="M:VISABConnector.IVISABSession.CloseSession">
            <summary>
            Closes the session at the VISAB WebApi
            </summary>
            <returns>True if the session was succesfully closed, false else</returns>
        </member>
        <member name="M:VISABConnector.IVISABSession.SendMap``1(``0)">
            <summary>
            Sends a map object to the VISAB WebApi
            </summary>
            <typeparam name="T">The type inheriting IUnityMap</typeparam>
            <param name="map">The map object of type T</param>
            <returns>True if the map was received by VISAB, false else</returns>
        </member>
        <member name="M:VISABConnector.IVISABSession.SendMapInformation``1(``0)">
            <summary>
            Sends a map information object to the VISAB WebApi
            </summary>
            <typeparam name="T">The type inheriting IUnityMapInformation</typeparam>
            <param name="mapInformation">The map information object of type T</param>
            <returns>True if the map information was received by VISAB, false else</returns>
        </member>
        <member name="M:VISABConnector.IVISABSession.SendStatistics``1(``0)">
            <summary>
            Sends a statistics object to the VISAB WebApi
            </summary>
            <typeparam name="T">The type inheriting IVISABStatistics</typeparam>
            <param name="statistics">The statistics object of type T</param>
            <returns>True if the statistics were received by VISAB, false else</returns>
        </member>
        <member name="T:VISABConnector.DontSerialize">
            <summary>
            Properties decorated with this Attribute wont be serialized
            </summary>
        </member>
        <member name="T:VISABConnector.ClosingEventArgs">
            <summary>
            Event args for when the IVISABSession being closed
            </summary>
        </member>
        <member name="P:VISABConnector.ClosingEventArgs.RequestHandler">
            <summary>
            The RequestHandler currently in use by the IVISABSession object
            </summary>
        </member>
        <member name="T:VISABConnector.Default">
            <summary>
            Contains default values used for communication with the VISAB WebApi
            </summary>
        </member>
        <member name="F:VISABConnector.Default.PORT">
            <summary>
            The default port that VISAB is running on
            </summary>
        </member>
        <member name="F:VISABConnector.Default.REQUEST_TIMEOUT">
            <summary>
            Timeout for HTTP Requests in seconds
            </summary>
        </member>
        <member name="T:VISABConnector.IVISABRequestHandler">
            <summary>
            Used for making Http requests to the VISAB WebApi
            </summary>
        </member>
        <member name="M:VISABConnector.IVISABRequestHandler.GetApiResponseAsync``1(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},``0)">
            <summary>
            Gets an ApiResponse for the given request
            </summary>
            <typeparam name="TBody">The type of the body</typeparam>
            <param name="httpMethod">The http method used</param>
            <param name="relativeUrl">The relative url to make the request to</param>
            <param name="queryParameters">The query parameters</param>
            <param name="body">The requests body</param>
            <returns>An awaitable Task which results in an ApiResponse object</returns>
        </member>
        <member name="M:VISABConnector.IVISABRequestHandler.GetApiResponseAsync(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Gets an ApiResponse for the given request
            </summary>
            <param name="httpMethod">The http method used</param>
            <param name="relativeUrl">The relative url to make the request to</param>
            <param name="queryParameters">The query parameters</param>
            <param name="body">The requests body</param>
            <returns>An awaitable Task which results in an ApiResponse object</returns>
        </member>
        <member name="M:VISABConnector.IVISABRequestHandler.GetDeserializedResponseAsync``1(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Gets the deserialize response content
            </summary>
            <typeparam name="TResponse">The type to deserialize into</typeparam>
            <param name="httpMethod">The http method used</param>
            <param name="relativeUrl">The relative url to make the request to</param>
            <param name="queryParameters">The query parameters</param>
            <param name="body">The requests body</param>
            <returns>An awaitable Task whose body contains the deserialized object</returns>
        </member>
        <member name="M:VISABConnector.IVISABRequestHandler.GetDeserializedResponseAsync``2(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},``0)">
            <summary>
            Gets the deserialize response content
            </summary>
            <typeparam name="TResponse">The type to deserialize into</typeparam>
            <typeparam name="TBody">The type of the body</typeparam>
            <param name="httpMethod">The http method used</param>
            <param name="relativeUrl">The relative url to make the request to</param>
            <param name="queryParameters">The query parameters</param>
            <param name="body">The requests body</param>
            <returns>An awaitable Task whose body contains the deserialized object</returns>
        </member>
        <member name="M:VISABConnector.IVISABRequestHandler.GetJsonResponseAsync(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Gets the json response content
            </summary>
            <param name="httpMethod">The http method used</param>
            <param name="relativeUrl">The relative url to make the request to</param>
            <param name="queryParameters">The query parameters</param>
            <param name="body">The requests body</param>
            <returns>An awaitable Task whose body contains the json string</returns>
        </member>
        <member name="M:VISABConnector.IVISABRequestHandler.GetJsonResponseAsync``1(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},``0)">
            <summary>
            Gets the json response content
            </summary>
            <typeparam name="TBody">The type of the body</typeparam>
            <param name="httpMethod">The http method used</param>
            <param name="relativeUrl">The relative url to make the request to</param>
            <param name="queryParameters">The query parameters</param>
            <param name="body">The requests body</param>
            <returns>An awaitable Task whose body contains the json string</returns>
        </member>
        <member name="M:VISABConnector.IVISABRequestHandler.GetSuccessResponseAsync(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Gets whether the requests response status was successful
            </summary>
            <param name="httpMethod">The http method used</param>
            <param name="relativeUrl">The relative url to make the request to</param>
            <param name="queryParameters">The query parameters</param>
            <param name="body">The requests body</param>
            <returns>An awaitable Task whose body contains whether the request was successful</returns>
        </member>
        <member name="M:VISABConnector.IVISABRequestHandler.GetSuccessResponseAsync``1(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},``0)">
            <summary>
            Gets whether the requests response status was successful
            </summary>
            <typeparam name="TBody">The type of the body</typeparam>
            <param name="httpMethod">The http method used</param>
            <param name="relativeUrl">The relative url to make the request to</param>
            <param name="queryParameters">The query parameters</param>
            <param name="body">The requests body</param>
            <returns>An awaitable Task whose body contains whether the request was successful</returns>
        </member>
        <member name="T:VISABConnector.Http.RequestHandlerBase">
            <summary>
            Base class used for making Http requests. Classes making Http requests should inherit from this.
            </summary>
        </member>
        <member name="F:VISABConnector.Http.RequestHandlerBase.httpClient">
            <summary>
            The used HttpClient
            </summary>
        </member>
        <member name="M:VISABConnector.Http.RequestHandlerBase.#ctor(System.String)">
            <summary>
            Initializes a RequestHandlerBase instance
            </summary>
            <param name="baseAdress">The base adress for the HttpClient</param>
        </member>
        <member name="M:VISABConnector.Http.RequestHandlerBase.GetResponseAsync(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Makes a http request and gets the HttpResponseMessage object
            </summary>
            <param name="httpMethod">The http method used</param>
            <param name="relativeUrl">The relative url to make the request to</param>
            <param name="queryParameters">The query parameters</param>
            <param name="body">The requests body</param>
            <returns>The HttpResponseMessage object</returns>
        </member>
        <member name="M:VISABConnector.Http.RequestHandlerBase.BuildParameterizedUrl(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Builds a parametrized url from the given query parameters
            </summary>
            <param name="relativeUrl">The relative url without the parameters</param>
            <param name="queryParameters">The query parameters to add</param>
            <returns>A parametrized url</returns>
        </member>
        <member name="M:VISABConnector.Http.RequestHandlerBase.GetResponseContentAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
            Reads the content from a HttpResponseMessage
            </summary>
            <param name="httpResponse">The HttpResponseMessage to read the content from</param>
            <returns>The content as a string, empty string if request wasn't successful</returns>
        </member>
        <member name="M:VISABConnector.Http.RequestHandlerBase.PrepareRequest(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Builds a HttpRequestMessage object
            </summary>
            <param name="httpMethod">The http method used</param>
            <param name="relativeUrl">The relative url to make the request to</param>
            <param name="queryParameters">The query parameters</param>
            <param name="body">The requests body</param>
            <returns>The built HttpRequestMessage object</returns>
        </member>
        <member name="T:VISABConnector.Http.VISABRequestHandler">
            <inheritdoc cref="T:VISABConnector.IVISABRequestHandler"/>
        </member>
        <member name="M:VISABConnector.Http.VISABRequestHandler.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a VISABRequestHandler object
            </summary>
            <param name="gameHeader">The game for which information will be sent</param>
            <param name="sessionIdHeader">The sessionId of the current tranmission session</param>
        </member>
        <member name="M:VISABConnector.Http.VISABRequestHandler.GetApiResponseAsync``1(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},``0)">
            <inheritdoc/>
        </member>
        <member name="M:VISABConnector.Http.VISABRequestHandler.GetApiResponseAsync(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VISABConnector.Http.VISABRequestHandler.GetDeserializedResponseAsync``1(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VISABConnector.Http.VISABRequestHandler.GetDeserializedResponseAsync``2(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},``0)">
            <inheritdoc/>
        </member>
        <member name="M:VISABConnector.Http.VISABRequestHandler.GetJsonResponseAsync(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VISABConnector.Http.VISABRequestHandler.GetJsonResponseAsync``1(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},``0)">
            <inheritdoc/>
        </member>
        <member name="M:VISABConnector.Http.VISABRequestHandler.GetSuccessResponseAsync(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VISABConnector.Http.VISABRequestHandler.GetSuccessResponseAsync``1(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String},``0)">
            <inheritdoc/>
        </member>
        <member name="T:VISABConnector.IgnorePropertyContractResolver`1">
            <summary>
            Contract resolver that doesn't serialize properties decorated with attributes of type T.
            </summary>
            <typeparam name="T">The attribute type to ignore</typeparam>
        </member>
        <member name="T:VISABConnector.IVISABStatistics">
            <summary>
            The interface that all classes containing statistics have to implement.
            </summary>
        </member>
        <member name="P:VISABConnector.IVISABStatistics.Game">
            <summary>
            The game of which statistics are sent
            </summary>
        </member>
        <member name="T:VISABConnector.VISABApi">
            <summary>
            Class for initializing transmission sessions and making static requests to the VISAB WebApi
            </summary>
        </member>
        <member name="F:VISABConnector.VISABApi.ENDPOINT_GAME_SUPPORTED">
            <summary>
            Relative endpoint for checking useability for current game in VISAB API
            </summary>
        </member>
        <member name="F:VISABConnector.VISABApi.ENDPOINT_PING_TEST">
            <summary>
            Relative endpoint for ping testing the VISAB API
            </summary>
        </member>
        <member name="F:VISABConnector.VISABApi.ENDPOINT_SESSION_LIST">
            <summary>
            Relative endpoints for listing the currently active sessions in VISAB API
            </summary>
        </member>
        <member name="F:VISABConnector.VISABApi.ENDPOINT_SESSION_STATUS">
            <summary>
            Relative endpoints for checking session status in VISAB API
            </summary>
        </member>
        <member name="F:VISABConnector.VISABApi.requestHandler">
            <summary>
            Request handler used for making Http requests
            </summary>
        </member>
        <member name="M:VISABConnector.VISABApi.GameIsSupported(System.String)">
            <summary>
            Indicates if the VISAB WebApi can receive data for the given game
            </summary>
            <param name="game">The game to check</param>
            <returns>True if game is supported, false else</returns>
        </member>
        <member name="M:VISABConnector.VISABApi.GetSessionStatus(System.Guid)">
            <summary>
            Gets the session status of for a given sessionId
            </summary>
            <param name="sessionId">The sessionId to check</param>
            <returns></returns>
        </member>
        <member name="M:VISABConnector.VISABApi.GetActiveSessions">
            <summary>
            Returns a list of the sessionIds for all active sessions
            </summary>
            <returns>A list of the sessionIds for all active sessions</returns>
        </member>
        <member name="M:VISABConnector.VISABApi.InitiateSession(System.String)">
            <summary>
            Creates a IVISABSession object, which simultaneously opens a transmission session at the
            VISAB WebApi
            </summary>
            <param name="game">The game of which to sent data</param>
            <returns>A IVISABSession object if a transmission session was openend, else null</returns>
        </member>
        <member name="M:VISABConnector.VISABApi.IsApiReachable">
            <summary>
            Indicates if the VISAB WebApi is running
            </summary>
            <returns>True if VISAB WebApi is reachable, false else</returns>
        </member>
        <member name="M:VISABConnector.VISABApi.StartVISAB(System.String)">
            <summary>
            Starts the VISAB jar
            </summary>
            <param name="pathToVisab">The path to the jar file</param>
        </member>
        <member name="T:VISABConnector.VISABSession">
            <inheritdoc cref="T:VISABConnector.IVISABSession"/>
        </member>
        <member name="F:VISABConnector.VISABSession.ENDPOINT_MAP_IMAGE">
            <summary>
            Relative endpoint for sending map images in VISAB API
            </summary>
        </member>
        <member name="F:VISABConnector.VISABSession.ENDPOINT_MAP_INFORMATION">
            <summary>
            Relative endpoint for sending map information in VISAB API
            </summary>
        </member>
        <member name="F:VISABConnector.VISABSession.ENDPOINT_SESSION_CLOSE">
            <summary>
            Relative endpoint for closing session in VISAB API
            </summary>
        </member>
        <member name="F:VISABConnector.VISABSession.ENDPOINT_SESSION_OPEN">
            <summary>
            Relative endpoint for opening session in VISAB API
            </summary>
        </member>
        <member name="F:VISABConnector.VISABSession.ENDPOINT_STATISTICS">
            <summary>
            Relative endpoint for sending statistics in VISAB API
            </summary>
        </member>
        <member name="E:VISABConnector.VISABSession.CloseSessionEvent">
            <inheritdoc/>
        </member>
        <member name="P:VISABConnector.VISABSession.Game">
            <inheritdoc/>
        </member>
        <member name="P:VISABConnector.VISABSession.IsActive">
            <inheritdoc/>
        </member>
        <member name="P:VISABConnector.VISABSession.RequestHandler">
            <inheritdoc/>
        </member>
        <member name="P:VISABConnector.VISABSession.SessionId">
            <inheritdoc/>
        </member>
        <member name="M:VISABConnector.VISABSession.CloseSession">
            <inheritdoc/>
        </member>
        <member name="M:VISABConnector.VISABSession.SendMap``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:VISABConnector.VISABSession.SendMapInformation``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:VISABConnector.VISABSession.SendStatistics``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:VISABConnector.VISABSession.OpenSession">
            <inheritdoc/>
        </member>
    </members>
</doc>
